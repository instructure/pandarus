{
  "apiVersion": "1.0",
  "swaggerVersion": "1.2",
  "basePath": "https://canvas.instructure.com/api",
  "resourcePath": "/courses",
  "produces": [
    "application/json"
  ],
  "apis": [
    {
      "path": "/v1/courses",
      "description": "Returns the list of active courses for the current user.",
      "operations": [
        {
          "method": "GET",
          "summary": "List your courses",
          "notes": "Returns the list of active courses for the current user.",
          "nickname": "list_your_courses",
          "parameters": [
            {
              "paramType": "query",
              "name": "enrollment_type",
              "description": "When set, only return courses where the user is enrolled as this type. For example, set to \"teacher\" to return only courses where the user is enrolled as a Teacher. This argument is ignored if enrollment_role is given.",
              "type": "string",
              "format": null,
              "required": false,
              "enum": [
                "teacher",
                "student",
                "ta",
                "observer",
                "designer"
              ]
            },
            {
              "paramType": "query",
              "name": "enrollment_role",
              "description": "Deprecated When set, only return courses where the user is enrolled with the specified course-level role. This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a base role type of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment', or 'DesignerEnrollment'.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "query",
              "name": "enrollment_role_id",
              "description": "When set, only return courses where the user is enrolled with the specified course-level role. This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a built_in role type of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment', or 'DesignerEnrollment'.",
              "type": "integer",
              "format": "int64",
              "required": false
            },
            {
              "paramType": "query",
              "name": "include",
              "description": "- \"needs_grading_count\": Optional information to include with each Course. When needs_grading_count is given, and the current user has grading rights, the total number of submissions needing grading for all assignments is returned. - \"syllabus_body\": Optional information to include with each Course. When syllabus_body is given the user-generated html for the course syllabus is returned. - \"total_scores\": Optional information to include with each Course. When total_scores is given, any enrollments with type 'student' will also include the fields 'calculated_current_score', 'calculated_final_score', 'calculated_current_grade', and 'calculated_final_grade'. calculated_current_score is the student's score in the course, ignoring ungraded assignments. calculated_final_score is the student's score in the course including ungraded assignments with a score of 0. calculated_current_grade is the letter grade equivalent of calculated_current_score (if available). calculated_final_grade is the letter grade equivalent of calculated_final_score (if available). This argument is ignored if the course is configured to hide final grades. - \"term\": Optional information to include with each Course. When term is given, the information for the enrollment term for each course is returned. - \"course_progress\": Optional information to include with each Course. When course_progress is given, each course will include a 'course_progress' object with the fields: 'requirement_count', an integer specifying the total number of requirements in the course, 'requirement_completed_count', an integer specifying the total number of requirements in this course that have been completed, and 'next_requirement_url', a string url to the next requirement item, and 'completed_at', the date the course was completed (null if incomplete). 'next_requirement_url' will be null if all requirements have been completed or the current module does not require sequential progress. \"course_progress\" will return an error message if the course is not module based or the user is not enrolled as a student in the course. - \"sections\": Section enrollment information to include with each Course. Returns an array of hashes containing the section ID (id), section name (name), start and end dates (start_at, end_at), as well as the enrollment type (enrollment_role, e.g. 'StudentEnrollment'). - \"storage_quota_used_mb\": The amount of storage space used by the files in this course - \"total_students\": Optional information to include with each Course. Returns an integer for the total amount of active and invited students. - \"passback_status\": Include the grade passback_status",
              "type": "array",
              "format": null,
              "required": false,
              "enum": [
                "needs_grading_count",
                "syllabus_body",
                "total_scores",
                "term",
                "course_progress",
                "sections",
                "storage_quota_used_mb",
                "total_students"
              ],
              "items": {
                "type": "string"
              }
            },
            {
              "paramType": "query",
              "name": "state",
              "description": "If set, only return courses that are in the given state(s). By default, \"available\" is returned for students and observers, and anything except \"deleted\", for all other enrollment types",
              "type": "array",
              "format": null,
              "required": false,
              "enum": [
                "unpublished",
                "available",
                "completed",
                "deleted"
              ],
              "items": {
                "type": "string"
              }
            }
          ],
          "type": "array",
          "items": {
            "$ref": "Course"
          }
        }
      ]
    },
    {
      "path": "/v1/accounts/{account_id}/courses",
      "description": "Create a new course",
      "operations": [
        {
          "method": "POST",
          "summary": "Create a new course",
          "notes": "Create a new course",
          "nickname": "create_new_course",
          "parameters": [
            {
              "paramType": "path",
              "name": "account_id",
              "description": "The unique ID of the account to create to course under.",
              "type": "integer",
              "format": "int64",
              "required": true
            },
            {
              "paramType": "form",
              "name": "course[name]",
              "description": "The name of the course. If omitted, the course will be named \"Unnamed Course.\"",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[course_code]",
              "description": "The course code for the course.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[start_at]",
              "description": "Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z",
              "type": "datetime",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[end_at]",
              "description": "Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z",
              "type": "datetime",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[license]",
              "description": "The name of the licensing. Should be one of the following abbreviations (a descriptive name is included in parenthesis for reference): - 'private' (Private Copyrighted) - 'cc_by_nc_nd' (CC Attribution Non-Commercial No Derivatives) - 'cc_by_nc_sa' (CC Attribution Non-Commercial Share Alike) - 'cc_by_nc' (CC Attribution Non-Commercial) - 'cc_by_nd' (CC Attribution No Derivatives) - 'cc_by_sa' (CC Attribution Share Alike) - 'cc_by' (CC Attribution) - 'public_domain' (Public Domain).",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[is_public]",
              "description": "Set to true if course if public.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[is_public_to_auth_users]",
              "description": "Set to true if course if public to authenticated users.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[public_syllabus]",
              "description": "Set to true to make the course syllabus public.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[public_description]",
              "description": "A publicly visible description of the course.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[allow_student_wiki_edits]",
              "description": "If true, students will be able to modify the course wiki.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[allow_wiki_comments]",
              "description": "If true, course members will be able to comment on wiki pages.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[allow_student_forum_attachments]",
              "description": "If true, students can attach files to forum posts.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[open_enrollment]",
              "description": "Set to true if the course is open enrollment.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[self_enrollment]",
              "description": "Set to true if the course is self enrollment.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[restrict_enrollments_to_course_dates]",
              "description": "Set to true to restrict user enrollments to the start and end dates of the course.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[term_id]",
              "description": "The unique ID of the term to create to course in.",
              "type": "integer",
              "format": "int64",
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[sis_course_id]",
              "description": "The unique SIS identifier.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[integration_id]",
              "description": "The unique Integration identifier.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[hide_final_grades]",
              "description": "If this option is set to true, the totals in student grades summary will be hidden.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[apply_assignment_group_weights]",
              "description": "Set to true to weight final grade based on assignment groups percentages.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[time_zone]",
              "description": "The time zone for the course. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "offer",
              "description": "If this option is set to true, the course will be available to students immediately.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "enroll_me",
              "description": "Set to true to enroll the current user as the teacher.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[syllabus_body]",
              "description": "The syllabus body for the course",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[grading_standard_id]",
              "description": "The grading standard id to set for the course. If no value is provided for this argument the current grading_standard will be un-set from this course.",
              "type": "integer",
              "format": "int64",
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[course_format]",
              "description": "Optional. Specifies the format of the course. (Should be either 'on_campus' or 'online')",
              "type": "string",
              "format": null,
              "required": false
            }
          ],
          "type": "Course"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/files",
      "description": "Upload a file to the course.\n\nThis API endpoint is the first step in uploading a file to a course.\nSee the {file:file_uploads.html File Upload Documentation} for details on\nthe file upload workflow.\n\nOnly those with the \"Manage Files\" permission on a course can upload files\nto the course. By default, this is Teachers, TAs and Designers.",
      "operations": [
        {
          "method": "POST",
          "summary": "Upload a file",
          "notes": "Upload a file to the course.\n\nThis API endpoint is the first step in uploading a file to a course.\nSee the {file:file_uploads.html File Upload Documentation} for details on\nthe file upload workflow.\n\nOnly those with the \"Manage Files\" permission on a course can upload files\nto the course. By default, this is Teachers, TAs and Designers.",
          "nickname": "upload_file",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/students",
      "description": "Returns the list of students enrolled in this course.\n\nDEPRECATED: Please use the {api:CoursesController#users course users} endpoint\nand pass \"student\" as the enrollment_type.",
      "operations": [
        {
          "method": "GET",
          "summary": "List students",
          "notes": "Returns the list of students enrolled in this course.\n\nDEPRECATED: Please use the {api:CoursesController#users course users} endpoint\nand pass \"student\" as the enrollment_type.",
          "nickname": "list_students",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "array",
          "items": {
            "$ref": "User"
          }
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/users",
      "description": "Returns the list of users in this course. And optionally the user's enrollments in the course.",
      "operations": [
        {
          "method": "GET",
          "summary": "List users in course",
          "notes": "Returns the list of users in this course. And optionally the user's enrollments in the course.",
          "nickname": "list_users_in_course_users",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "search_term",
              "description": "The partial name or full ID of the users to match and return in the results list.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "query",
              "name": "enrollment_type",
              "description": "When set, only return users where the user is enrolled as this type. This argument is ignored if enrollment_role is given.",
              "type": "string",
              "format": null,
              "required": false,
              "enum": [
                "teacher",
                "student",
                "ta",
                "observer",
                "designer"
              ]
            },
            {
              "paramType": "query",
              "name": "enrollment_role",
              "description": "Deprecated When set, only return users enrolled with the specified course-level role. This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a base role type of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment', or 'DesignerEnrollment'.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "query",
              "name": "enrollment_role_id",
              "description": "When set, only return courses where the user is enrolled with the specified course-level role. This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a built_in role id with type 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment', or 'DesignerEnrollment'.",
              "type": "integer",
              "format": "int64",
              "required": false
            },
            {
              "paramType": "query",
              "name": "include",
              "description": "- \"email\": Optional user email. - \"enrollments\": Optionally include with each Course the user's current and invited enrollments. If the user is enrolled as a student, and the account has permission to manage or view all grades, each enrollment will include a 'grades' key with 'current_score', 'final_score', 'current_grade' and 'final_grade' values. - \"locked\": Optionally include whether an enrollment is locked. - \"avatar_url\": Optionally include avatar_url. - \"bio\": Optionally include each user's bio. - \"test_student\": Optionally include the course's Test Student, if present. Default is to not include Test Student.",
              "type": "array",
              "format": null,
              "required": false,
              "enum": [
                "email",
                "enrollments",
                "locked",
                "avatar_url",
                "test_student",
                "bio"
              ],
              "items": {
                "type": "string"
              }
            },
            {
              "paramType": "query",
              "name": "user_id",
              "description": "If included, the user will be queried and if the user is part of the users set, the page parameter will be modified so that the page containing user_id will be returned.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "query",
              "name": "enrollment_state",
              "description": "When set, only return users where the enrollment workflow state is of one of the given types. \"active\" and \"invited\" enrollments are returned by default.",
              "type": "array",
              "format": null,
              "required": false,
              "enum": [
                "active",
                "invited",
                "rejected",
                "completed",
                "inactive"
              ],
              "items": {
                "type": "string"
              }
            }
          ],
          "type": "array",
          "items": {
            "$ref": "User"
          }
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/search_users",
      "description": "Returns the list of users in this course. And optionally the user's enrollments in the course.",
      "operations": [
        {
          "method": "GET",
          "summary": "List users in course",
          "notes": "Returns the list of users in this course. And optionally the user's enrollments in the course.",
          "nickname": "list_users_in_course_search_users",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "search_term",
              "description": "The partial name or full ID of the users to match and return in the results list.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "query",
              "name": "enrollment_type",
              "description": "When set, only return users where the user is enrolled as this type. This argument is ignored if enrollment_role is given.",
              "type": "string",
              "format": null,
              "required": false,
              "enum": [
                "teacher",
                "student",
                "ta",
                "observer",
                "designer"
              ]
            },
            {
              "paramType": "query",
              "name": "enrollment_role",
              "description": "Deprecated When set, only return users enrolled with the specified course-level role. This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a base role type of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment', or 'DesignerEnrollment'.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "query",
              "name": "enrollment_role_id",
              "description": "When set, only return courses where the user is enrolled with the specified course-level role. This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a built_in role id with type 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment', or 'DesignerEnrollment'.",
              "type": "integer",
              "format": "int64",
              "required": false
            },
            {
              "paramType": "query",
              "name": "include",
              "description": "- \"email\": Optional user email. - \"enrollments\": Optionally include with each Course the user's current and invited enrollments. If the user is enrolled as a student, and the account has permission to manage or view all grades, each enrollment will include a 'grades' key with 'current_score', 'final_score', 'current_grade' and 'final_grade' values. - \"locked\": Optionally include whether an enrollment is locked. - \"avatar_url\": Optionally include avatar_url. - \"bio\": Optionally include each user's bio. - \"test_student\": Optionally include the course's Test Student, if present. Default is to not include Test Student.",
              "type": "array",
              "format": null,
              "required": false,
              "enum": [
                "email",
                "enrollments",
                "locked",
                "avatar_url",
                "test_student",
                "bio"
              ],
              "items": {
                "type": "string"
              }
            },
            {
              "paramType": "query",
              "name": "user_id",
              "description": "If included, the user will be queried and if the user is part of the users set, the page parameter will be modified so that the page containing user_id will be returned.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "query",
              "name": "enrollment_state",
              "description": "When set, only return users where the enrollment workflow state is of one of the given types. \"active\" and \"invited\" enrollments are returned by default.",
              "type": "array",
              "format": null,
              "required": false,
              "enum": [
                "active",
                "invited",
                "rejected",
                "completed",
                "inactive"
              ],
              "items": {
                "type": "string"
              }
            }
          ],
          "type": "array",
          "items": {
            "$ref": "User"
          }
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/recent_students",
      "description": "Returns the list of users in this course, ordered by how recently they have\nlogged in. The records include the 'last_login' field which contains\na timestamp of the last time that user logged into canvas.  The querying\nuser must have the 'View usage reports' permission.",
      "operations": [
        {
          "method": "GET",
          "summary": "List recently logged in students",
          "notes": "Returns the list of users in this course, ordered by how recently they have\nlogged in. The records include the 'last_login' field which contains\na timestamp of the last time that user logged into canvas.  The querying\nuser must have the 'View usage reports' permission.",
          "nickname": "list_recently_logged_in_students",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "array",
          "items": {
            "$ref": "User"
          }
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/users/{id}",
      "description": "Return information on a single user.\n\nAccepts the same include[] parameters as the :users: action, and returns a\nsingle user with the same fields as that action.",
      "operations": [
        {
          "method": "GET",
          "summary": "Get single user",
          "notes": "Return information on a single user.\n\nAccepts the same include[] parameters as the :users: action, and returns a\nsingle user with the same fields as that action.",
          "nickname": "get_single_user",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "User"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/preview_html",
      "description": "Preview html content processed for this course",
      "operations": [
        {
          "method": "POST",
          "summary": "Preview processed html",
          "notes": "Preview html content processed for this course",
          "nickname": "preview_processed_html",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "html",
              "description": "The html content to process",
              "type": "string",
              "format": null,
              "required": false
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/activity_stream",
      "description": "Returns the current user's course-specific activity stream, paginated.\n\nFor full documentation, see the API documentation for the user activity\nstream, in the user api.",
      "operations": [
        {
          "method": "GET",
          "summary": "Course activity stream",
          "notes": "Returns the current user's course-specific activity stream, paginated.\n\nFor full documentation, see the API documentation for the user activity\nstream, in the user api.",
          "nickname": "course_activity_stream",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/activity_stream/summary",
      "description": "Returns a summary of the current user's course-specific activity stream.\n\nFor full documentation, see the API documentation for the user activity\nstream summary, in the user api.",
      "operations": [
        {
          "method": "GET",
          "summary": "Course activity stream summary",
          "notes": "Returns a summary of the current user's course-specific activity stream.\n\nFor full documentation, see the API documentation for the user activity\nstream summary, in the user api.",
          "nickname": "course_activity_stream_summary",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/todo",
      "description": "Returns the current user's course-specific todo items.\n\nFor full documentation, see the API documentation for the user todo items, in the user api.",
      "operations": [
        {
          "method": "GET",
          "summary": "Course TODO items",
          "notes": "Returns the current user's course-specific todo items.\n\nFor full documentation, see the API documentation for the user todo items, in the user api.",
          "nickname": "course_todo_items",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/courses/{id}",
      "description": "Delete or conclude an existing course",
      "operations": [
        {
          "method": "DELETE",
          "summary": "Conclude a course",
          "notes": "Delete or conclude an existing course",
          "nickname": "conclude_course",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "event",
              "description": "The action to take on the course.",
              "type": "string",
              "format": null,
              "required": true,
              "enum": [
                "delete",
                "conclude"
              ]
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/settings",
      "description": "Returns some of a course's settings.",
      "operations": [
        {
          "method": "GET",
          "summary": "Get course settings",
          "notes": "Returns some of a course's settings.",
          "nickname": "get_course_settings",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/settings",
      "description": "Can update the following course settings:",
      "operations": [
        {
          "method": "PUT",
          "summary": "Update course settings",
          "notes": "Can update the following course settings:",
          "nickname": "update_course_settings",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "allow_student_discussion_topics",
              "description": "Let students create discussion topics",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "allow_student_forum_attachments",
              "description": "Let students attach files to discussions",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "allow_student_discussion_editing",
              "description": "Let students edit or delete their own discussion posts",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "allow_student_organized_groups",
              "description": "Let students organize their own groups",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "hide_final_grades",
              "description": "Hide totals in student grades summary",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "hide_distribution_graphs",
              "description": "Hide grade distribution graphs from students",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "lock_all_announcements",
              "description": "Disable comments on announcements",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "restrict_student_past_view",
              "description": "Restrict students from viewing courses after end date",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "restrict_student_future_view",
              "description": "Restrict students from viewing courses before start date",
              "type": "boolean",
              "format": null,
              "required": false
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/courses/{id}",
      "description": "Return information on a single course.\n\nAccepts the same include[] parameters as the list action plus:",
      "operations": [
        {
          "method": "GET",
          "summary": "Get a single course",
          "notes": "Return information on a single course.\n\nAccepts the same include[] parameters as the list action plus:",
          "nickname": "get_single_course_courses",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "include",
              "description": "- \"all_courses\": Also search recently deleted courses. - \"permissions\": Include permissions the current user has for the course.",
              "type": "array",
              "format": null,
              "required": false,
              "enum": [
                "all_courses",
                "permissions"
              ],
              "items": {
                "type": "string"
              }
            }
          ],
          "type": "Course"
        }
      ]
    },
    {
      "path": "/v1/accounts/{account_id}/courses/{id}",
      "description": "Return information on a single course.\n\nAccepts the same include[] parameters as the list action plus:",
      "operations": [
        {
          "method": "GET",
          "summary": "Get a single course",
          "notes": "Return information on a single course.\n\nAccepts the same include[] parameters as the list action plus:",
          "nickname": "get_single_course_accounts",
          "parameters": [
            {
              "paramType": "path",
              "name": "account_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "include",
              "description": "- \"all_courses\": Also search recently deleted courses. - \"permissions\": Include permissions the current user has for the course.",
              "type": "array",
              "format": null,
              "required": false,
              "enum": [
                "all_courses",
                "permissions"
              ],
              "items": {
                "type": "string"
              }
            }
          ],
          "type": "Course"
        }
      ]
    },
    {
      "path": "/v1/courses/{id}",
      "description": "Update an existing course.\n\nArguments are the same as Courses#create, with a few exceptions (enroll_me).",
      "operations": [
        {
          "method": "PUT",
          "summary": "Update a course",
          "notes": "Update an existing course.\n\nArguments are the same as Courses#create, with a few exceptions (enroll_me).",
          "nickname": "update_course",
          "parameters": [
            {
              "paramType": "path",
              "name": "id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "course[account_id]",
              "description": "The unique ID of the account to create to course under.",
              "type": "integer",
              "format": "int64",
              "required": true
            },
            {
              "paramType": "form",
              "name": "course[name]",
              "description": "The name of the course. If omitted, the course will be named \"Unnamed Course.\"",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[course_code]",
              "description": "The course code for the course.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[start_at]",
              "description": "Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z",
              "type": "datetime",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[end_at]",
              "description": "Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z",
              "type": "datetime",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[license]",
              "description": "The name of the licensing. Should be one of the following abbreviations (a descriptive name is included in parenthesis for reference): - 'private' (Private Copyrighted) - 'cc_by_nc_nd' (CC Attribution Non-Commercial No Derivatives) - 'cc_by_nc_sa' (CC Attribution Non-Commercial Share Alike) - 'cc_by_nc' (CC Attribution Non-Commercial) - 'cc_by_nd' (CC Attribution No Derivatives) - 'cc_by_sa' (CC Attribution Share Alike) - 'cc_by' (CC Attribution) - 'public_domain' (Public Domain).",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[is_public]",
              "description": "Set to true if course if public.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[public_syllabus]",
              "description": "Set to true to make the course syllabus public.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[public_description]",
              "description": "A publicly visible description of the course.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[allow_student_wiki_edits]",
              "description": "If true, students will be able to modify the course wiki.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[allow_wiki_comments]",
              "description": "If true, course members will be able to comment on wiki pages.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[allow_student_forum_attachments]",
              "description": "If true, students can attach files to forum posts.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[open_enrollment]",
              "description": "Set to true if the course is open enrollment.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[self_enrollment]",
              "description": "Set to true if the course is self enrollment.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[restrict_enrollments_to_course_dates]",
              "description": "Set to true to restrict user enrollments to the start and end dates of the course.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[term_id]",
              "description": "The unique ID of the term to create to course in.",
              "type": "integer",
              "format": "int64",
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[sis_course_id]",
              "description": "The unique SIS identifier.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[integration_id]",
              "description": "The unique Integration identifier.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[hide_final_grades]",
              "description": "If this option is set to true, the totals in student grades summary will be hidden.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[time_zone]",
              "description": "The time zone for the course. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[apply_assignment_group_weights]",
              "description": "Set to true to weight final grade based on assignment groups percentages.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "offer",
              "description": "If this option is set to true, the course will be available to students immediately.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[syllabus_body]",
              "description": "The syllabus body for the course",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[grading_standard_id]",
              "description": "The grading standard id to set for the course. If no value is provided for this argument the current grading_standard will be un-set from this course.",
              "type": "integer",
              "format": "int64",
              "required": false
            },
            {
              "paramType": "form",
              "name": "course[course_format]",
              "description": "Optional. Specifies the format of the course. (Should be either 'on_campus' or 'online')",
              "type": "string",
              "format": null,
              "required": false
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/accounts/{account_id}/courses",
      "description": "Update multiple courses in an account.  Operates asynchronously; use the {api:ProgressController#show progress endpoint}\nto query the status of an operation.\n\nThe action to take on each course.  Must be one of 'offer', 'conclude', 'delete', or 'undelete'.\n  * 'offer' makes a course visible to students. This action is also called \"publish\" on the web site.\n  * 'conclude' prevents future enrollments and makes a course read-only for all participants. The course still appears\n    in prior-enrollment lists.\n  * 'delete' completely removes the course from the web site (including course menus and prior-enrollment lists).\n    All enrollments are deleted. Course content may be physically deleted at a future date.\n  * 'undelete' attempts to recover a course that has been deleted. (Recovery is not guaranteed; please conclude\n    rather than delete a course if there is any possibility the course will be used again.) The recovered course\n    will be unpublished. Deleted enrollments will not be recovered.",
      "operations": [
        {
          "method": "PUT",
          "summary": "Update courses",
          "notes": "Update multiple courses in an account.  Operates asynchronously; use the {api:ProgressController#show progress endpoint}\nto query the status of an operation.\n\nThe action to take on each course.  Must be one of 'offer', 'conclude', 'delete', or 'undelete'.\n  * 'offer' makes a course visible to students. This action is also called \"publish\" on the web site.\n  * 'conclude' prevents future enrollments and makes a course read-only for all participants. The course still appears\n    in prior-enrollment lists.\n  * 'delete' completely removes the course from the web site (including course menus and prior-enrollment lists).\n    All enrollments are deleted. Course content may be physically deleted at a future date.\n  * 'undelete' attempts to recover a course that has been deleted. (Recovery is not guaranteed; please conclude\n    rather than delete a course if there is any possibility the course will be used again.) The recovered course\n    will be unpublished. Deleted enrollments will not be recovered.",
          "nickname": "update_courses",
          "parameters": [
            {
              "paramType": "path",
              "name": "account_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "course_ids",
              "description": "List of ids of courses to update. At most 500 courses may be updated in one call.",
              "type": "array",
              "format": null,
              "required": true,
              "items": {
                "type": "string"
              }
            },
            {
              "paramType": "form",
              "name": "event",
              "description": "no description",
              "type": "string",
              "format": null,
              "required": true,
              "enum": [
                "offer",
                "conclude",
                "delete",
                "undelete"
              ]
            }
          ],
          "type": "Progress"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/reset_content",
      "description": "Deletes the current course, and creates a new equivalent course with\nno content, but all sections and users moved over.",
      "operations": [
        {
          "method": "POST",
          "summary": "Reset a course",
          "notes": "Deletes the current course, and creates a new equivalent course with\nno content, but all sections and users moved over.",
          "nickname": "reset_course",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "Course"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/course_copy/{id}",
      "description": "DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}\n\nRetrieve the status of a course copy",
      "operations": [
        {
          "method": "GET",
          "summary": "Get course copy status",
          "notes": "DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}\n\nRetrieve the status of a course copy",
          "nickname": "get_course_copy_status",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/course_copy",
      "description": "DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}\n\nCopies content from one course into another. The default is to copy all course\ncontent. You can control specific types to copy by using either the 'except' option\nor the 'only' option.\n\nThe response is the same as the course copy status endpoint",
      "operations": [
        {
          "method": "POST",
          "summary": "Copy course content",
          "notes": "DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}\n\nCopies content from one course into another. The default is to copy all course\ncontent. You can control specific types to copy by using either the 'except' option\nor the 'only' option.\n\nThe response is the same as the course copy status endpoint",
          "nickname": "copy_course_content",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "source_course",
              "description": "ID or SIS-ID of the course to copy the content from",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "except",
              "description": "A list of the course content types to exclude, all areas not listed will be copied.",
              "type": "array",
              "format": null,
              "required": false,
              "enum": [
                "course_settings",
                "assignments",
                "external_tools",
                "files",
                "topics",
                "calendar_events",
                "quizzes",
                "wiki_pages",
                "modules",
                "outcomes"
              ],
              "items": {
                "type": "string"
              }
            },
            {
              "paramType": "form",
              "name": "only",
              "description": "A list of the course content types to copy, all areas not listed will not be copied.",
              "type": "array",
              "format": null,
              "required": false,
              "enum": [
                "course_settings",
                "assignments",
                "external_tools",
                "files",
                "topics",
                "calendar_events",
                "quizzes",
                "wiki_pages",
                "modules",
                "outcomes"
              ],
              "items": {
                "type": "string"
              }
            }
          ],
          "type": "void"
        }
      ]
    }
  ],
  "models": {
    "Term": {
      "id": "Term",
      "description": "",
      "required": [

      ],
      "properties": {
        "id": {
          "example": 1,
          "type": "integer"
        },
        "name": {
          "example": "Default Term",
          "type": "string"
        },
        "start_at": {
          "example": "2012-06-01T00:00:00-06:00",
          "type": "datetime"
        },
        "end_at": {
          "type": "datetime"
        }
      }
    },
    "CourseProgress": {
      "id": "CourseProgress",
      "description": "",
      "required": [

      ],
      "properties": {
        "requirement_count": {
          "description": "total number of requirements from all modules",
          "example": 10,
          "type": "integer"
        },
        "requirement_completed_count": {
          "description": "total number of requirements the user has completed from all modules",
          "example": 1,
          "type": "integer"
        },
        "next_requirement_url": {
          "description": "url to next module item that has an unmet requirement. null if the user has completed the course or the current module does not require sequential progress",
          "example": "http://localhost/courses/1/modules/items/2",
          "type": "string"
        },
        "completed_at": {
          "description": "date the course was completed. null if the course has not been completed by this user",
          "example": "2013-06-01T00:00:00-06:00",
          "type": "datetime"
        }
      }
    },
    "Course": {
      "id": "Course",
      "description": "",
      "required": [

      ],
      "properties": {
        "id": {
          "description": "the unique identifier for the course",
          "example": 370663,
          "type": "integer"
        },
        "sis_course_id": {
          "description": "the SIS identifier for the course, if defined. This field is only included if the user has permission to view SIS information.",
          "type": "string"
        },
        "integration_id": {
          "description": "the integration identifier for the course, if defined. This field is only included if the user has permission to view SIS information.",
          "type": "string"
        },
        "name": {
          "description": "the full name of the course",
          "example": "InstructureCon 2012",
          "type": "string"
        },
        "course_code": {
          "description": "the course code",
          "example": "INSTCON12",
          "type": "string"
        },
        "workflow_state": {
          "description": "the current state of the course one of 'unpublished', 'available', 'completed', or 'deleted'",
          "example": "available",
          "type": "string",
          "allowableValues": {
            "values": [
              "unpublished",
              "available",
              "completed",
              "deleted"
            ]
          }
        },
        "account_id": {
          "description": "the account associated with the course",
          "example": 81259,
          "type": "integer"
        },
        "root_account_id": {
          "description": "the root account associated with the course",
          "example": 81259,
          "type": "integer"
        },
        "enrollment_term_id": {
          "description": "the enrollment term associated with the course",
          "example": 34,
          "type": "integer"
        },
        "start_at": {
          "description": "the start date for the course, if applicable",
          "example": "2012-06-01T00:00:00-06:00",
          "type": "datetime"
        },
        "end_at": {
          "description": "the end date for the course, if applicable",
          "example": "2012-09-01T00:00:00-06:00",
          "type": "datetime"
        },
        "enrollments": {
          "description": "A list of enrollments linking the current user to the course. for student enrollments, grading information may be included if include[]=total_scores",
          "type": "array",
          "items": {
            "$ref": "Enrollment"
          }
        },
        "total_students": {
          "description": "optional: the total number of active and invited students in the course",
          "example": 32,
          "type": "integer"
        },
        "calendar": {
          "description": "course calendar",
          "$ref": "CalendarLink"
        },
        "default_view": {
          "description": "the type of page that users will see when they first visit the course - 'feed': Recent Activity Dashboard - 'wiki': Wiki Front Page - 'modules': Course Modules/Sections Page - 'assignments': Course Assignments List - 'syllabus': Course Syllabus Page other types may be added in the future",
          "example": "feed",
          "type": "string",
          "allowableValues": {
            "values": [
              "feed",
              "wiki",
              "modules",
              "syllabus",
              "assignments"
            ]
          }
        },
        "syllabus_body": {
          "description": "optional: user-generated HTML for the course syllabus",
          "example": "<p>syllabus html goes here</p>",
          "type": "string"
        },
        "needs_grading_count": {
          "description": "optional: the number of submissions needing grading returned only if the current user has grading rights and include[]=needs_grading_count",
          "example": 17,
          "type": "integer"
        },
        "term": {
          "description": "optional: the enrollment term object for the course returned only if include[]=term",
          "$ref": "Term"
        },
        "course_progress": {
          "description": "optional (beta): information on progress through the course returned only if include[]=course_progress",
          "$ref": "CourseProgress"
        },
        "apply_assignment_group_weights": {
          "description": "weight final grade based on assignment group percentages",
          "example": true,
          "type": "boolean"
        },
        "permissions": {
          "description": "optional: the permissions the user has for the course. returned only for a single course and include[]=permissions",
          "example": "{\"create_discussion_topic\"=>true,\"create_announcement\"=>true}",
          "type": "map",
          "key": {
            "type": "string"
          },
          "value": {
            "type": "boolean"
          }
        },
        "is_public": {
          "example": true,
          "type": "boolean"
        },
        "is_public_to_auth_users": {
          "example": true,
          "type": "boolean"
        },
        "public_syllabus": {
          "example": true,
          "type": "boolean"
        },
        "public_description": {
          "example": "Come one, come all to InstructureCon 2012!",
          "type": "string"
        },
        "storage_quota_mb": {
          "example": 5,
          "type": "integer"
        },
        "storage_quota_used_mb": {
          "example": 5,
          "type": "float"
        },
        "hide_final_grades": {
          "example": false,
          "type": "boolean"
        },
        "license": {
          "example": "Creative Commons",
          "type": "string"
        },
        "allow_student_assignment_edits": {
          "example": false,
          "type": "boolean"
        },
        "allow_wiki_comments": {
          "example": false,
          "type": "boolean"
        },
        "allow_student_forum_attachments": {
          "example": false,
          "type": "boolean"
        },
        "open_enrollment": {
          "example": true,
          "type": "boolean"
        },
        "self_enrollment": {
          "example": false,
          "type": "boolean"
        },
        "restrict_enrollments_to_course_dates": {
          "example": false,
          "type": "boolean"
        },
        "course_format": {
          "example": "online",
          "type": "string"
        },
        "time_zone": {
          "description": "The course's IANA time zone name.",
          "example": "America/Denver",
          "type": "string"
        }
      }
    },
    "CalendarLink": {
      "id": "CalendarLink",
      "description": "",
      "required": [

      ],
      "properties": {
        "ics": {
          "description": "The URL of the calendar in ICS format",
          "example": "https://canvas.instructure.com/feeds/calendars/course_abcdef.ics",
          "type": "string"
        }
      }
    }
  }
}
