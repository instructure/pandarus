{
  "apiVersion": "1.0",
  "swaggerVersion": "1.2",
  "basePath": "http://canvas.instructure.com/api",
  "resourcePath": "/collections",
  "produces": [
    "application/json"
  ],
  "apis": [
    {
      "path": "/v1/users/{user_id}/collections",
      "description": "Returns the visible collections for the given group or user, returned\nmost-recently-created first.  If the given context is the current user or\na group to which the current user belongs, then all collections will be\nreturned, otherwise only public collections will be returned. In the former\ncase, if no collections exist for the context, a default, private\ncollection will be created and returned.",
      "operations": [
        {
          "method": "GET",
          "summary": "List user/group collections",
          "notes": "Returns the visible collections for the given group or user, returned\nmost-recently-created first.  If the given context is the current user or\na group to which the current user belongs, then all collections will be\nreturned, otherwise only public collections will be returned. In the former\ncase, if no collections exist for the context, a default, private\ncollection will be created and returned.",
          "nickname": "list_user_group_collections_users",
          "parameters": [
            {
              "paramType": "path",
              "name": "user_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "array",
          "items": {
            "$ref": "Collection"
          }
        }
      ]
    },
    {
      "path": "/v1/groups/{group_id}/collections",
      "description": "Returns the visible collections for the given group or user, returned\nmost-recently-created first.  If the given context is the current user or\na group to which the current user belongs, then all collections will be\nreturned, otherwise only public collections will be returned. In the former\ncase, if no collections exist for the context, a default, private\ncollection will be created and returned.",
      "operations": [
        {
          "method": "GET",
          "summary": "List user/group collections",
          "notes": "Returns the visible collections for the given group or user, returned\nmost-recently-created first.  If the given context is the current user or\na group to which the current user belongs, then all collections will be\nreturned, otherwise only public collections will be returned. In the former\ncase, if no collections exist for the context, a default, private\ncollection will be created and returned.",
          "nickname": "list_user_group_collections_groups",
          "parameters": [
            {
              "paramType": "path",
              "name": "group_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "array",
          "items": {
            "$ref": "Collection"
          }
        }
      ]
    },
    {
      "path": "/v1/collections",
      "description": "Returns the list of collections to which the current user has permission to\npost.  For each possible collection context (the current user and each\ncommunity she belongs to) if no collections exist for the context,\na default, private collection will be created and included in the returned\nlist.",
      "operations": [
        {
          "method": "GET",
          "summary": "List pinnable collections",
          "notes": "Returns the list of collections to which the current user has permission to\npost.  For each possible collection context (the current user and each\ncommunity she belongs to) if no collections exist for the context,\na default, private collection will be created and included in the returned\nlist.",
          "nickname": "list_pinnable_collections",
          "parameters": [

          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/collections/{collection_id}",
      "description": "Returns information on an individual collection. If the collection is\nprivate and the caller doesn't have read access, a 401 is returned.",
      "operations": [
        {
          "method": "GET",
          "summary": "Get a single collection",
          "notes": "Returns information on an individual collection. If the collection is\nprivate and the caller doesn't have read access, a 401 is returned.",
          "nickname": "get_single_collection",
          "parameters": [
            {
              "paramType": "path",
              "name": "collection_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "Collection"
        }
      ]
    },
    {
      "path": "/v1/users/{user_id}/collections",
      "description": "Creates a new collection. You can only create collections on your own user,\nor on a group to which you belong.",
      "operations": [
        {
          "method": "POST",
          "summary": "Create a collection",
          "notes": "Creates a new collection. You can only create collections on your own user,\nor on a group to which you belong.",
          "nickname": "create_collection_users",
          "parameters": [
            {
              "paramType": "path",
              "name": "user_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "name",
              "description": "no description",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "visibility",
              "description": "no description",
              "type": "string",
              "format": null,
              "required": true,
              "enum": [
                "public",
                "private"
              ]
            }
          ],
          "type": "Collection"
        }
      ]
    },
    {
      "path": "/v1/groups/{group_id}/collections",
      "description": "Creates a new collection. You can only create collections on your own user,\nor on a group to which you belong.",
      "operations": [
        {
          "method": "POST",
          "summary": "Create a collection",
          "notes": "Creates a new collection. You can only create collections on your own user,\nor on a group to which you belong.",
          "nickname": "create_collection_groups",
          "parameters": [
            {
              "paramType": "path",
              "name": "group_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "name",
              "description": "no description",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "visibility",
              "description": "no description",
              "type": "string",
              "format": null,
              "required": true,
              "enum": [
                "public",
                "private"
              ]
            }
          ],
          "type": "Collection"
        }
      ]
    },
    {
      "path": "/v1/collections/{collection_id}",
      "description": "Modify an existing collection. You must have write access to the collection.\n\nCollection visibility cannot be modified once the collection is created.",
      "operations": [
        {
          "method": "PUT",
          "summary": "Edit a collection",
          "notes": "Modify an existing collection. You must have write access to the collection.\n\nCollection visibility cannot be modified once the collection is created.",
          "nickname": "edit_collection",
          "parameters": [
            {
              "paramType": "path",
              "name": "collection_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "name",
              "description": "no description",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "visibility",
              "description": "Be advised that setting a public collection to private will permanantly remove all of its followers.",
              "type": "string",
              "format": null,
              "required": true,
              "enum": [
                "public",
                "private"
              ]
            }
          ],
          "type": "Collection"
        }
      ]
    },
    {
      "path": "/v1/collections/{collection_id}",
      "description": "Deletes a collection and all contained collection items. You must\nhave write access to the collection.",
      "operations": [
        {
          "method": "DELETE",
          "summary": "Delete a collection",
          "notes": "Deletes a collection and all contained collection items. You must\nhave write access to the collection.",
          "nickname": "delete_collection",
          "parameters": [
            {
              "paramType": "path",
              "name": "collection_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "Collection"
        }
      ]
    },
    {
      "path": "/v1/collections/{collection_id}/followers/self",
      "description": "Follow this collection. If the current user is already following the\ncollection, nothing happens. The user must have permissions to view the\ncollection in order to follow it.\n\nResponds with a 401 if the user doesn't have permission to follow the\ncollection, or a 400 if the user can't follow the collection (if it's the\nuser's own collection, for example).",
      "operations": [
        {
          "method": "PUT",
          "summary": "Follow a collection",
          "notes": "Follow this collection. If the current user is already following the\ncollection, nothing happens. The user must have permissions to view the\ncollection in order to follow it.\n\nResponds with a 401 if the user doesn't have permission to follow the\ncollection, or a 400 if the user can't follow the collection (if it's the\nuser's own collection, for example).",
          "nickname": "follow_collection",
          "parameters": [
            {
              "paramType": "path",
              "name": "collection_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/collections/{collection_id}/followers/self",
      "description": "Stop following this collection. If the current user is not already\nfollowing the collection, nothing happens.",
      "operations": [
        {
          "method": "DELETE",
          "summary": "Un-follow a collection",
          "notes": "Stop following this collection. If the current user is not already\nfollowing the collection, nothing happens.",
          "nickname": "un_follow_collection",
          "parameters": [
            {
              "paramType": "path",
              "name": "collection_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/collections/{collection_id}/items",
      "description": "Returns the collection items in a collection, most-recently-created first.\nThe user must have read access to the collection.",
      "operations": [
        {
          "method": "GET",
          "summary": "List collection items",
          "notes": "Returns the collection items in a collection, most-recently-created first.\nThe user must have read access to the collection.",
          "nickname": "list_collection_items_collections",
          "parameters": [
            {
              "paramType": "path",
              "name": "collection_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "array",
          "items": {
            "$ref": "CollectionItem"
          }
        }
      ]
    },
    {
      "path": "/v1/collections/{collection_id}/items",
      "description": "Returns the collection items in a collection, most-recently-created first.\nThe user must have read access to the collection.",
      "operations": [
        {
          "method": "GET",
          "summary": "List collection items",
          "notes": "Returns the collection items in a collection, most-recently-created first.\nThe user must have read access to the collection.",
          "nickname": "list_collection_items_collections",
          "parameters": [
            {
              "paramType": "path",
              "name": "collection_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "array",
          "items": {
            "$ref": "CollectionItem"
          }
        }
      ]
    },
    {
      "path": "/v1/collections/items/{item_id}",
      "description": "Returns an individual collection item. The user must have read access to the collection.",
      "operations": [
        {
          "method": "GET",
          "summary": "Get an individual collection item",
          "notes": "Returns an individual collection item. The user must have read access to the collection.",
          "nickname": "get_individual_collection_item",
          "parameters": [
            {
              "paramType": "path",
              "name": "item_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "CollectionItem"
        }
      ]
    },
    {
      "path": "/v1/collections/{collection_id}/items",
      "description": "Create a new item in this collection. You can also clone an existing item\nfrom another collection.",
      "operations": [
        {
          "method": "POST",
          "summary": "Create or clone a collection item",
          "notes": "Create a new item in this collection. You can also clone an existing item\nfrom another collection.",
          "nickname": "create_or_clone_collection_item",
          "parameters": [
            {
              "paramType": "path",
              "name": "collection_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "link_url",
              "description": "The URL of the item to add. This can be any HTTP or HTTPS address. The item_type will be determined by the link_url that is passed in. To clone an existing item, pass in the url to that item as returned in the JSON response in the \"url\" field.",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "title",
              "description": "The title of the item. If no title is provided, Canvas will try to automatically add a relevant title based on the linked content.",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "description",
              "description": "The plain-text description of the item. If no description is provided, Canvas will try to automatically add a relevant description based on the linked content.",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "image_url",
              "description": "The URL of the image to use for this item. If no image url is provided, Canvas will try to automatically determine an image representation for the link. This parameter is ignored if the new item is a clone of an existing item.",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "user_comment",
              "description": "The user's comments on the item. This can be set when cloning an existing item, as well.",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "CollectionItem"
        }
      ]
    },
    {
      "path": "/v1/collections/items/{item_id}",
      "description": "Change a collection item's mutable attributes.",
      "operations": [
        {
          "method": "PUT",
          "summary": "Edit a collection item",
          "notes": "Change a collection item's mutable attributes.",
          "nickname": "edit_collection_item",
          "parameters": [
            {
              "paramType": "path",
              "name": "item_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "user_comment",
              "description": "no description",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "CollectionItem"
        }
      ]
    },
    {
      "path": "/v1/collections/items/{item_id}",
      "description": "Delete a collection item from the collection. This will not delete any\nclones of the item in other collections.",
      "operations": [
        {
          "method": "DELETE",
          "summary": "Delete a collection item",
          "notes": "Delete a collection item from the collection. This will not delete any\nclones of the item in other collections.",
          "nickname": "delete_collection_item",
          "parameters": [
            {
              "paramType": "path",
              "name": "item_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "CollectionItem"
        }
      ]
    },
    {
      "path": "/v1/collections/items/{item_id}/upvotes/self",
      "description": "Upvote a collection item. If the current user has already upvoted the item,\nnothing happens and the existing upvote data is returned. Upvotes are\nshared between the root item and all clones, so if the user has already\nupvoted another clone of the item, nothing happens.\n\nThe upvoted_by_user field on the CollectionItem response data can be used\nto determine if the user has already upvoted the item.",
      "operations": [
        {
          "method": "PUT",
          "summary": "Upvote an item",
          "notes": "Upvote a collection item. If the current user has already upvoted the item,\nnothing happens and the existing upvote data is returned. Upvotes are\nshared between the root item and all clones, so if the user has already\nupvoted another clone of the item, nothing happens.\n\nThe upvoted_by_user field on the CollectionItem response data can be used\nto determine if the user has already upvoted the item.",
          "nickname": "upvote_item",
          "parameters": [
            {
              "paramType": "path",
              "name": "item_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/collections/items/{item_id}/upvotes/self",
      "description": "Remove the current user's upvote of an item. This is a no-op if the user\nhas not upvoted this item.",
      "operations": [
        {
          "method": "DELETE",
          "summary": "De-upvote an item",
          "notes": "Remove the current user's upvote of an item. This is a no-op if the user\nhas not upvoted this item.",
          "nickname": "de_upvote_item",
          "parameters": [
            {
              "paramType": "path",
              "name": "item_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "void"
        }
      ]
    }
  ],
  "models": {
    "Collection": {
      "id": "Collection",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "visibility": {
          "type": "string"
        },
        "followed_by_user": {
          "type": "boolean"
        },
        "followers_count": {
          "type": "integer",
          "format": "int64"
        },
        "items_count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "CollectionItem": {
      "id": "CollectionItem",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "collection_id": {
          "type": "integer",
          "format": "int64"
        },
        "item_type": {
          "type": "string"
        },
        "link_url": {
          "type": "string"
        },
        "post_count": {
          "type": "integer",
          "format": "int64"
        },
        "upvote_count": {
          "type": "integer",
          "format": "int64"
        },
        "upvoted_by_user": {
          "type": "boolean"
        },
        "root_item_id": {
          "type": "integer",
          "format": "int64"
        },
        "image_url": {
          "type": "string"
        },
        "image_pending": {
          "type": "boolean"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "user_comment": {
          "type": "string"
        },
        "html_preview": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "user": {
          "type": "string"
        }
      }
    }
  }
}
