require "pandarus/api_base"
require "pandarus/models"

{{#operations}}
# This is an autogenerated file. See readme.md.
module Pandarus
  class {{classname}} < APIBase

    self.prefix = "{{basePath}}"

    {{#operation}}def {{nickname}}({{#requiredParams}}{{paramName}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}},{{/requiredParams}} opts={})
      query_param_keys = [
        {{#queryParams}}:{{paramName}}{{#hasMore}},
        {{/hasMore}}
      {{/queryParams}}{{newline}}
      ]

      form_param_keys = [
        {{#formParams}}:{{paramName}}{{#hasMore}},
        {{/hasMore}}
      {{/formParams}}{{newline}}
      ]

      {{#requiredParamCount}}
      # verify existence of params
      {{#requiredParams}}
      raise "{{{paramName}}} is required" if {{{paramName}}}.nil?
      {{/requiredParams}}
      {{/requiredParamCount}}

      # set default values and merge with input
      options = underscored_merge_opts(opts,
        {{#requiredParams}}:{{paramName}} => {{paramName}}{{#hasMore}},
        {{/hasMore}}
      {{/requiredParams}}
      {{^requiredParams}}
        {}
      {{/requiredParams}}{{newline}}
      )

      # resource path
      path = path_replace("{{path}}",
        {{#pathParams}}:{{baseName}} => {{paramName}}{{#hasMore}},
        {{/hasMore}}{{/pathParams}}
      )
      {{#headerParams}}headers = {
        {{{paramName}}}: {{{paramName}}},
      }
      {{/headerParams}}
      {{^headerParams}}headers = nil
      {{/headerParams}}
      
      form_params = select_params(options, form_param_keys)
      query_params = select_params(options, query_param_keys)
      if opts[:next_page]
        pagination_params = page_params_load(:{{httpMethodLowerCase}}, path)
        query_params.merge! pagination_params if pagination_params
      end
      response = mixed_request(:{{httpMethodLowerCase}}, path, query_params, form_params, headers)
      page_params_store(:{{httpMethodLowerCase}}, path)
      {{#returnType}}
      {{#returnContainer}}
      response.map {|response|{{/returnContainer}} {{returnBaseType}}.new(response){{#returnContainer}} }{{/returnContainer}}
      {{/returnType}}
      {{^returnType}}
        {{#returnContainer}}
        raise "Array returned when object expected" if response.is_a?(Array)
        {{/returnContainer}}
      response
      {{/returnType}}
    {{newline}}
    end
    {{/operation}}
    {{newline}}
  end
end
{{/operations}}